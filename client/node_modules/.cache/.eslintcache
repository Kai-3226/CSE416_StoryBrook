[{"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/index.js":"1","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/reportWebVitals.js":"2","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/App.js":"3","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/LoginScreen.js":"4","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/index.js":"5","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/auth/index.js":"6","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/store/index.js":"7","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/ErrorModal.js":"8","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/AppBanner.js":"9","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/ListCard.js":"10","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/HomeScreen.js":"11","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/RegisterScreen.js":"12","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/SplashScreen.js":"13","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Top5Item.js":"14","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Statusbar.js":"15","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/CreateScreen.js":"16","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/api/index.js":"17","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/WorkspaceScreen.js":"18","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/DeleteModal.js":"19","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Copyright.js":"20","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/MypageScreen.js":"21","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Card.js":"22","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/MypageProfile.js":"23","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/MypageSidebar.js":"24","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/WorkCard.js":"25"},{"size":928,"mtime":1650242543290,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1635079530000,"results":"28","hashOfConfig":"27"},{"size":1363,"mtime":1650242543276,"results":"29","hashOfConfig":"27"},{"size":3738,"mtime":1650242543285,"results":"30","hashOfConfig":"27"},{"size":730,"mtime":1650242543289,"results":"31","hashOfConfig":"27"},{"size":4638,"mtime":1650242642531,"results":"32","hashOfConfig":"27"},{"size":19555,"mtime":1650242543291,"results":"33","hashOfConfig":"27"},{"size":1224,"mtime":1636388500000,"results":"34","hashOfConfig":"27"},{"size":4127,"mtime":1650242543281,"results":"35","hashOfConfig":"27"},{"size":5801,"mtime":1638846862013,"results":"36","hashOfConfig":"27"},{"size":5259,"mtime":1638835115851,"results":"37","hashOfConfig":"27"},{"size":5392,"mtime":1636248006000,"results":"38","hashOfConfig":"27"},{"size":1116,"mtime":1650242543289,"results":"39","hashOfConfig":"27"},{"size":1177,"mtime":1638843484187,"results":"40","hashOfConfig":"27"},{"size":1449,"mtime":1638840610980,"results":"41","hashOfConfig":"27"},{"size":2017,"mtime":1650242543284,"results":"42","hashOfConfig":"27"},{"size":1866,"mtime":1650242543280,"results":"43","hashOfConfig":"27"},{"size":2756,"mtime":1638852610347,"results":"44","hashOfConfig":"27"},{"size":2055,"mtime":1650242543285,"results":"45","hashOfConfig":"27"},{"size":452,"mtime":1635079530000,"results":"46","hashOfConfig":"27"},{"size":2299,"mtime":1650242543288,"results":"47","hashOfConfig":"27"},{"size":2508,"mtime":1650242543283,"results":"48","hashOfConfig":"27"},{"size":2062,"mtime":1650258623220,"results":"49","hashOfConfig":"27"},{"size":1555,"mtime":1649536105429,"results":"50","hashOfConfig":"27"},{"size":0,"mtime":1650242543289,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1948kq9",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/index.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/reportWebVitals.js",[],["114","115"],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/App.js",["116","117","118","119"],"import './App2.css';\nimport { React } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { AuthContextProvider } from './auth';\nimport { GlobalStoreContextProvider } from './store'\nimport {\n    AppBanner,\n    SplashScreen,\n    RegisterScreen,\n    Statusbar,\n    HomeScreen,\n    MypageScreen,\n    Card,\n    Profile\n} from './components'\nimport LoginScreen from './components/LoginScreen'\n/*\n    This is our application's top-level component.\n    \n    @author McKilla Gorilla\n*/\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n  \n  @author McKilla Gorilla\n*/\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <AuthContextProvider>\n                <GlobalStoreContextProvider>              \n                    <AppBanner />\n                    <Switch>\n                        <Route path=\"/\" exact component={MypageScreen} />\n                        <Route path=\"/home/\" exact component = {HomeScreen} />\n                        <Route path=\"/login/\" exact component={LoginScreen} />\n                        <Route path=\"/register/\" exact component={RegisterScreen} />\n                    </Switch>\n                </GlobalStoreContextProvider>\n            </AuthContextProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/LoginScreen.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/index.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/auth/index.js",["120"],"import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    LOGIN_USER: \"LOGIN_USER\",\n    ERROR: \"ERROR\",\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        error: false\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    error: false\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    error: false\n                })\n            }\n            case AuthActionType.LOGOUT_USER: {\n                return setAuth({\n                    user:null,\n                    loggedIn: false,\n                    error: false\n                })\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user:payload,\n                    loggedIn:true,\n                    error:false\n                })\n            }\n            case AuthActionType.ERROR: {\n                return setAuth({\n                    user:null,\n                    loggedIn:false,\n                    error:payload\n                })\n            }\n            default:\n                return setAuth({\n                    user:null,\n                    loggedIn:false,\n                    error:false\n                })\n        }\n    }\n    auth.default= function () {\n        authReducer({\n            type: AuthActionType.default,\n            payload: null\n        });\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.SET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user,\n                }\n            });\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        try{\n            const response = await api.registerUser(userData);      \n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/home\");\n                store.loadIdNamePairs();\n            }\n        }\n        catch(err){\n            authReducer({\n                type: AuthActionType.ERROR,\n                payload:{\n                    status:err.response.status,\n                    message:err.response.data.errorMessage\n                }\n            })\n        }\n    }\n    auth.logoutUser = async function(){\n        const response = await api.logoutUser();\n        if(response.status === 200){\n            authReducer({\n                type: AuthActionType.LOGOUT_USER,\n                paylaod:null\n            })\n            history.push(\"/\");\n        }\n    }\n    auth.loginUser = async function(user){\n        try{\n            const response = await api.loginUser(user);\n            if(response.status===200){\n                authReducer({\n                    type: AuthActionType.LOGIN_USER,\n                    payload:response.data.user\n                })\n                history.push(\"/home\");\n            }\n        }\n        catch(err){\n            authReducer({\n                type: AuthActionType.ERROR,\n                payload:{\n                    status:err.response.status,\n                    message:err.response.data.errorMessage\n                }\n            })\n        }\n        \n    }\n    auth.searchUser = async function(user){\n        \n    }\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>git \n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/store/index.js",["121"],"import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    EDIT_LIST: \"EDIT_LIST\",\n    UPDATE_LIST: \"UPDATE_LIST\",\n    SEARCH: \"SEARCH\",\n    MODE: \"MODE\",\n    SORT: \"SORT\",\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        editActive: false,\n        listMarkedForDeletion: null,\n        mode: null,\n        text: \"\"\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    eidtActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                console.log(\"loading\");\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: payload,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.list,\n                    editActive: payload.edit,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.EDIT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    editActive:false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.SEARCH: {\n                console.log(\"search\");\n                return setStore({\n                    idNamePairs:payload,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: store.mode,\n                    text: \"\"\n                });\n            }\n            case GlobalStoreActionType.MODE: {\n                return setStore({\n                    idNamePairs:store.idNamePairs,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: payload,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.SORT: {\n                return setStore({\n                    idNamePairs:payload,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.editList = async function (id, newName, newItems) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            top5List.items = newItems;\n            store.updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        let list=store.currentList;\n        list.view++;\n        store.updateList2(list);\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        store.loadIdNamePairs();    \n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"\"\n        let payload = {\n            name: newListName,\n            items: [\"\",\"\",\"\",\"\",\"\"],\n            ownerEmail: auth.user.email,\n            published:{published:false,time:Date()},\n            view:0,\n            likes:[],\n            dislikes:[],\n            comment:[],\n            author: auth.user.lastName+\" \"+auth.user.firstName\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            console.log(store.idNamePairs);\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        }\n        \n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let listOwned=[];\n            for(let key in pairsArray){\n                let list = pairsArray[key];\n                if(auth.loggedIn){\n                    if(auth.user.email===list.email){\n                        console.log(auth.user.email,list.email,list.published.published)\n                        listOwned.push(list);\n                    }\n                    else if(list.published.published){\n                        console.log(auth.user.email,list.email,list.published.published)\n                        listOwned.push(list);\n                    }\n                }\n                else{\n                    if(list.published.published){\n                        listOwned.push(list);\n                        console.log(listOwned);\n                    } \n                }\n                \n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: listOwned\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id, input) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: {list: top5List,edit: input}\n            });\n        }\n    }\n    store.updateList = async function (newList) {\n        if(newList.ownerEmail===auth.user.email){\n            async function updateList(newList) {\n                let response = await api.updateTop5ListById(newList._id, newList);\n                if (response.data.success) {\n                    async function getListPairs(newList) {\n                        let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let listOwned=[];\n                            for(let key in pairsArray){\n                                let list = pairsArray[key];\n                                listOwned.push(list);\n                            }\n                            storeReducer({\n                                type: GlobalStoreActionType.UPDATE_LIST,\n                                payload: {\n                                    idNamePairs: listOwned,\n                                    top5List: newList\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(newList);\n                }\n            }\n            updateList(newList);\n        }\n        store.loadIdNamePairs();\n    }\n    store.updateList2 = async function (newList) {\n        async function updateList(newList) {\n            let response = await api.updateTop5ListById(newList._id, newList);\n            if (response.data.success) {\n                async function getListPairs(newList) {\n                    let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        let listOwned=[];\n                        for(let key in pairsArray){\n                            let list = pairsArray[key];\n                            listOwned.push(list);\n                        }\n                        storeReducer({\n                            type: GlobalStoreActionType.UPDATE_LIST,\n                            payload: {\n                                idNamePairs: listOwned,\n                                top5List: newList\n                            }\n                        });\n                    }\n                }\n                getListPairs(newList);\n            }\n        }\n        updateList(newList);\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_LIST,\n            payload: null\n        });\n    }\n    store.publish = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let list=response.data.top5List;\n            let date = new Date();\n            list.published={published:true,time:date.getMonth()+\"-\"+date.getDate()+\", \"+date.getFullYear()}\n            store.updateList(list);\n        }\n    }\n    store.searchLists = async function (payload) {\n        const response = await api.getTop5ListPairs();\n        let lists= response.data.idNamePairs;\n        console.log(lists);\n        let filter =[];\n        for(let key in lists){\n            let list=lists[key]\n            if(list.published.published){\n                if(store.mode===\"home\"){\n                    if(list.name.toLowerCase().startsWith(payload.toLowerCase())){\n                        filter.push(list);\n                    }\n                }\n                else if(store.mode===\"all\"){\n                    if(list.name.toLowerCase()===payload.toLowerCase()){\n                        filter.push(list);\n                    }\n                }\n                else if(store.mode===\"user\"){\n                    if(list.author.toLowerCase()===payload.toLowerCase()){\n                        filter.push(list);\n                    }\n                }\n                else{\n                    if(list.name.toLowerCase().startsWith(payload.toLowerCase())){\n                        filter.push(list);\n                    }\n                }\n            }\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SEARCH,\n            payload:filter\n        });\n    }\n    store.setMode= function (input){\n        storeReducer({\n            type: GlobalStoreActionType.MODE,\n            payload:input\n        });\n    }\n    store.like = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if(top5List.dislikes.includes(auth.user.email)){\n                top5List.dislikes.pop(auth.user.email);\n                top5List.likes.push(auth.user.email);\n            }\n            else if(!top5List.likes.includes(auth.user.email)){\n                top5List.likes.push(auth.user.email);\n            }\n            else{\n                top5List.likes.pop(auth.user.email);\n            }\n            store.updateList2(top5List);\n        }\n    }\n    store.dislike = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if(top5List.likes.includes(auth.user.email)){\n                top5List.likes.pop(auth.user.email);\n                top5List.dislikes.push(auth.user.email);\n            }\n            else if(!top5List.dislikes.includes(auth.user.email)){\n                top5List.dislikes.push(auth.user.email);\n            }\n            else{\n                top5List.dislikes.pop(auth.user.email);\n            }\n            store.updateList2(top5List);\n        }\n    }\n    store.comment = async function (input,id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            let author=auth.user.firstName+\" \"+auth.user.lastName;\n            let payload={comment:input,author:author}\n            top5List.comment.push(payload);\n            store.updateList2(top5List);\n        }\n    }\n    function swap(arr, xp, yp){\n        var temp = arr[xp];\n        arr[xp] = arr[yp];\n        arr[yp] = temp;\n    }\n \n// An optimized version of Bubble Sort\n    store.sortBy = function(criteria) {\n        let i, j;\n        let lists=store.idNamePairs;\n        for (i = 0; i < lists.length-1; i++) {\n            for (j = 0; j < lists.length-i-1; j++) {\n                if(criteria===1){\n                    if (lists[j].published.time > lists[j+1].published.time){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else if(criteria===2){\n                    if (lists[j].published.time < lists[j+1].published.time){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else if(criteria===3){\n                    if (lists[j].view < lists[j+1].view){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else if(criteria===4){\n                    if (lists[j].likes.length < lists[j+1].likes.length){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else {\n                    if (lists[j].dislikes.length < lists[j+1].dislikes.length){\n                        swap(lists,j,j+1);\n                    }\n                }\n            }\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SORT,\n            payload: lists\n        });\n    }\n    \n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/ErrorModal.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/AppBanner.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/ListCard.js",["122","123","124","125"],"import { useContext, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport AuthContext from '../auth';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport ThumbsUp from '@mui/icons-material/ThumbUpOutlined';\nimport ThumbsDown from '@mui/icons-material/ThumbDownOutlined';\nimport Delete from '@mui/icons-material/DeleteOutlined';\nimport Open from '@mui/icons-material/KeyboardArrowDownOutlined';\nimport Work from './WorkspaceScreen';\nimport Close from '@mui/icons-material/KeyboardArrowUpOutlined';\n\n/*\n    This is a card in our list of top 5 lists. It lets select\n    a list for editing and it has controls for changing its \n    name or deleting it.\n    @author McKilla Gorilla\n*/\nfunction ListCard(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [editActive, setEditActive] = useState(false);\n    const [text, setText] = useState(\"\");\n    const { idNamePair } = props;\n    const [anchorEl, setAnchorEl] = useState(false);\n    const isOpen = Boolean(anchorEl);\n    const { auth } = useContext(AuthContext);\n    function handleLoadList(event, id) {\n        if (!event.target.disabled) {\n            // CHANGE THE CURRENT LIST\n            store.setCurrentList(id,true);\n        }\n    }\n    function handleLike(){\n        store.like(idNamePair._id);\n        store.loadIdNamePairs();\n    }\n    function handleDislike(){\n        store.dislike(idNamePair._id);\n        store.loadIdNamePairs();\n    }\n\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        setText(idNamePair.name);\n        toggleEdit();\n    }\n\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsListNameEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    async function handleDeleteList(event, id) {\n        event.stopPropagation();\n        store.markListForDeletion(id);\n    }\n\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\") {\n            let id = event.target.id.substring(\"list-\".length);\n            store.changeListName(id, text);\n            toggleEdit();\n        }\n    }\n    function handleUpdateText(event) {\n        setText(event.target.value);\n    }\n    function handleOpen(id){\n        if(!isOpen){\n            setAnchorEl(!isOpen);\n            let card=document.getElementById(idNamePair._id);\n            store.setCurrentList(id);\n            console.log(store.currentList);\n        }\n    }\n    function handleClose(){\n        setAnchorEl(!isOpen);\n        let card=document.getElementById(idNamePair._id);\n        card.classList.remove(\".expand\");\n        store.closeCurrentList();\n    }\n    let open=\"\";\n    let color=\"unpublished-list-card\"\n    let publish= <Button sx={{color:\"red\" }} onClick={(event) => {\n                    handleLoadList(event, idNamePair._id)\n                }}>\n                    Edit\n                </Button>;\n    if (idNamePair.published.published){\n        color=\"published-list-card\";\n        publish=\"Published:\"+idNamePair.published.time;\n        open=\n        <IconButton onClick={(event) => {handleOpen(idNamePair._id)}}>\n            <Open style={{fontSize: '18pt'}}/>\n        </IconButton>  \n    }\n    let list=\"\";\n    if(isOpen){\n        list=<Work></Work>;\n        open=\n        <IconButton onClick={(event) => {handleClose(idNamePair._id)}}>\n            <Close style={{fontSize: '18pt'}}/>\n        </IconButton>\n    }\n    let deletebutton=\n    <IconButton  onClick={(event) => {\n        handleDeleteList(event, idNamePair._id)\n        }} aria-label='delete' disabled={store.isListNameEditActive}>\n        <Delete style={{fontSize:'36pt'}} />\n    </IconButton>;\n    if(auth.user===null){\n        deletebutton=\"\";\n    }\n    else if(auth.user.email!==idNamePair.email){\n        deletebutton=\"\";\n    }\n\n    let cardElement =\n        <ListItem\n            id={idNamePair._id}\n            key={idNamePair._id}\n            sx={{ marginTop: '15px', display: 'flex', p: 1, height:'50%' }}\n            disabled={store.isListNameEditActive}\n            class={color}\n        >\n                <div class=\"firstrow\">\n                    <div width=\"50%\">\n                        <Box sx={{ width:0.5, fontSize:24}}>{idNamePair.name}</Box>\n                        <Box sx={{ width:0.5, fontSize:12, color:'blue'  }}>{\"By: \"+idNamePair.author}</Box>\n                    </div>\n                    <div width=\"50%\">\n                        <IconButton onClick={handleLike} aria-label='edit' disabled={store.isListNameEditActive}>\n                                <ThumbsUp style={{fontSize:'36pt'}} />\n                                {idNamePair.likes.length}\n                            </IconButton>\n                            <IconButton onClick={(event) => {\n                                handleDislike(event, idNamePair._id)\n                            }} aria-label='delete' disabled={store.isListNameEditActive}>\n                                <ThumbsDown style={{fontSize:'36pt'}} />\n                                {idNamePair.dislikes.length}\n                            </IconButton>\n                            {deletebutton}\n                    </div>\n                </div>\n                <div id=\"worspace-edit\">\n                    {list}\n                </div>\n                <div class=\"secondrow\">   \n                    <Box sx={{ fontSize:12 }}>{publish}</Box>\n                    <div font-size=\"12\">\n                        {\"Views: \"+idNamePair.view}\n                        {open}\n                    </div>                        \n                </div>\n                \n        </ListItem>\n    return (\n        cardElement\n    );\n}\n\nexport default ListCard;","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/HomeScreen.js",["126","127","128"],"import React, { useContext, useEffect } from 'react'\nimport {useState } from 'react';\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport List from '@mui/material/List';\nimport DeleteModal from './DeleteModal';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport IconButton from '@mui/material/IconButton';\nimport TextField from '@mui/material/TextField';\nimport AppBar from '@mui/material/AppBar';\nimport Home from '@mui/icons-material/HomeOutlined';\nimport Group from '@mui/icons-material/GroupsOutlined';\nimport Person from '@mui/icons-material/PersonOutline';\nimport Sigma from '@mui/icons-material/FunctionsOutlined';\nimport Sort from '@mui/icons-material/Sort';\nimport Create from './CreateScreen';\nimport Work from './WorkspaceScreen';\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst HomeScreen = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n    const [input,setInput] = useState(\"\");\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n    function handleUpdateText(event) {\n        setInput(event.target.value);\n    }\n    function handleKeyPress(event) {\n        if(event.code === \"Enter\") {\n            store.searchLists(input.toLowerCase());\n        }\n    }\n    async function handleClick(event,button) {\n        event.stopPropagation();\n        store.setMode(button);\n    }\n    function handleSort(criteria){\n        store.sortBy(criteria);\n    }\n    const menu = (\n        <Menu\n        anchorEl={anchorEl}\n        anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n        }}\n        keepMounted\n        transformOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n        }}\n        open={isMenuOpen}\n        onClose={handleMenuClose}>\n            <MenuItem onClick={(event) => {handleSort(2)}}>Published Date (Newest)</MenuItem>\n            <MenuItem onClick={(event) => {handleSort(1)}}>Published Date (Oldest)</MenuItem>\n            <MenuItem onClick={(event) => {handleSort(3)}}>Views</MenuItem>\n            <MenuItem onClick={(event) => {handleSort(4)}}>Likes</MenuItem>\n            <MenuItem onClick={(event) => {handleSort(5)}}>Dislikes</MenuItem>\n        </Menu>\n    );\n    let listCard = \"\";\n    if (store) {\n        listCard = \n                store.idNamePairs.map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                        sx={{padding:'5px'}}\n                    />\n                ))\n    }\n    if (store.editActive){\n        listCard=\n            <Create></Create>\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-heading\">\n            <AppBar position=\"static\">\n                <Toolbar sx={{bgcolor:\"#c4c4c4\", justifyContent:'space-between' }}>\n                    <Box sx={{ display: { xs: 'none', md: 'flex'},width:1000 }}>\n                        <IconButton disabled={store.addingList} onClick={(event) => {handleClick(event,\"home\")}}>\n                            <Home></Home>\n                        </IconButton>\n                        <IconButton disabled={store.addingList} onClick={(event) => {handleClick(event,\"all\")}}>\n                            <Group></Group>\n                        </IconButton>\n                        <IconButton disabled={store.addingList} onClick={(event) => {handleClick(event,\"user\")}}>\n                            <Person></Person>\n                        </IconButton>\n                        <IconButton disabled={store.addingList} onClick={(event) => {handleClick(event,\"community\")}}>\n                            <Sigma></Sigma>\n                        </IconButton>\n                        <TextField fullWidth sx={{bgcolor: '#FFFFFF'}}  label='search' disbaled={store.addingList}\n                            onChange={(event) => {handleUpdateText(event)}}\n                            onKeyPress={(event) => {handleKeyPress(event)}}\n                            defaultValue={store.text}\n                        />\n                    </Box>\n                    <Box sx={{ display: {md:'flex',color:'black',fontSize:20},alignItems:'center'}}>\n                        SORT BY\n                        <IconButton\n                            onClick={handleProfileMenuOpen}\n                            disabled={store.addingList}\n                        >\n                            <Sort></Sort>\n                        </IconButton>\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {menu}\n            </div>\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n                <DeleteModal />\n            </div>\n        </div>)\n}\n\nexport default HomeScreen;","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/RegisterScreen.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/SplashScreen.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Top5Item.js",["129","130","131","132","133"],"import { React, useContext, useState } from \"react\";\nimport { GlobalStoreContext } from '../store'\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n    \n    @author McKilla Gorilla\n*/\nfunction Top5Item(props) {\n    const { store } = useContext(GlobalStoreContext);\n    let { index } = props;\n\n    \n    let itemClass = \"top5-item\";\n\n    \n    return (\n            <ListItem\n                id={'item-' + (index+1)}\n                key={props.key}\n                className={itemClass}\n                sx={{ display: 'flex', p: 1, bgcolor:'2c2f70' }}\n                style={{\n                    fontSize: '48pt',\n                    width: '100%'\n                }}\n            >\n            <Box sx={{ p: 1 }}>\n                {index+1.}\n            </Box>\n                <Box sx={{ p: 1, flexGrow: 1 }}>{props.text}</Box>\n            </ListItem>\n    )\n}\n\nexport default Top5Item;","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Statusbar.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/CreateScreen.js",["134","135"],"import { useContext, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n\n\nconst CreateScreen = () => {\n    const { store } = useContext(GlobalStoreContext);\n    function handleSave (event) {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        let newName=formData.get('listName');\n        let newitems=[formData.get('item2'),formData.get('item3'),formData.get('item4'),formData.get('item5'),formData.get('item6')];\n        store.editList(store.currentList._id,newName,newitems);\n    };\n    function handlePublish(event){\n        store.publish(store.currentList._id);\n    }\n    let i = 1;\n    let add=\n        store.currentList.items.map((item)=>\n            <Box sx={{justifyContent:'space-evenly',flexDirection:'row', bgcolor:'#d4af36',margin:2, fontSize:36, flexWrap:'wrap',justifyContent:'center'}}>\n                <Typography variant=\"h3\" sx={{flexDirection:'row', width:0.1}}>{(i++)+\".\"}</Typography>\n                <Box><TextField sx={{width:0.9, flexDirection:'row'}} id={\"item\"+i} class='list-card' name={\"item\"+i} defaultValue={item}></TextField></Box>\n            </Box>\n        )\n    return (\n        <Box sx={{bgcolor:'#2C2F70'}} component=\"form\" onSubmit={handleSave}>\n            <TextField sx={{width:0.5,bgcolor:'white'}} id=\"listName\" name=\"listName\" defaultValue={store.currentList.name}></TextField>\n            <Box sx={{width:1,flexWrap:'wrap'}}>\n                {add}\n            </Box>\n            <Button sx={{flexDirection:'reverse-row', bgcolor:'gray', color:'black'}} type=\"submit\">Save</Button>\n            <Button sx={{flexDirection:'reverse-row', bgcolor:'gray', color:'black'}}  onClick={(event) => {\n            handlePublish(event)}}>\n                Publish\n            </Button>\n        </Box>\n    );\n}\n\nexport default CreateScreen;","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/api/index.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/WorkspaceScreen.js",["136","137","138","139","140","141"],"import { useContext, useState } from 'react'\nimport Top5Item from './Top5Item.js'\nimport List from '@mui/material/List';\nimport { Typography } from '@mui/material'\nimport { GlobalStoreContext } from '../store/index.js'\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport AuthContext from '../auth/';\nimport ListItem from '@mui/material/ListItem';\n\n \n/*\n    This React component lets us edit a loaded list, which only\n    happens when we are on the proper route.\n    \n    @author McKilla Gorilla\n*/\nfunction WorkspaceScreen() {\n    const { store } = useContext(GlobalStoreContext);\n    const auth = useContext(AuthContext);\n    const [input,setInput] = useState(\"\");\n    function handleUpdateText(event) {\n        setInput(event.target.value);\n    }\n    function handleKeyPress(event) {\n        console.log(store.currentList,\"asdfadf\");\n        if(event.code === \"Enter\") {\n            let comment=input;\n            let author=\"\"\n            store.comment(input,store.currentList._id);\n            store.closeCurrentList();\n        }\n    }\n    let editItems = \"\";\n    let comment = \"\";\n    if (store.currentList) {\n        editItems = (  \n            <Box id=\"edit-numbering\">\n            {store.currentList.items.map((item) => (\n                <Box className='item-number'sx={{flexDirection:\"column\",color:'#d4af36', bgcolor: 'inherit'}}>\n                    {(store.currentList.items.indexOf(item)+1)+\". \"+store.currentList.items[store.currentList.items.indexOf(item)]}\n                </Box>\n            ))}\n            </Box>\n        );\n        comment = (\n            <Box id=\"edit-numbering\" sx={{overflow:'scroll'}}>\n            <ListItem sx={{ marginTop: '15px', display: 'flex', p: 1, height:'100%', flexDirection:'column' }}>\n            {store.currentList.comment.map((text) => (\n                <Box className='item-number' sx={{flexDirection:\"column\",color:'black', bgcolor: '#d4af36', overflow: 'scroll'}}>\n                    <Box sx={{color:'blue'}}>{text.author}</Box>\n                    <Box>{text.comment}</Box>\n                </Box>\n            ))}\n            </ListItem>\n            <TextField sx={{bgcolor:'white',color:'white'}} label=\"add comment...\" \n            onKeyPress={(event) => {\n                handleKeyPress(event)\n            }}\n            onChange={(event) => {handleUpdateText(event)}}\n            name=\"comment\"\n            id=\"comment\"></TextField>\n            </Box>\n        );\n    }\n    console.log(comment);\n    return (\n        <div id=\"top5-workspace\">\n            <div id=\"workspace-edit\">\n                {editItems}\n                {comment}\n            </div>\n        </div>\n    )\n            \n}\n\nexport default WorkspaceScreen;","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/DeleteModal.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Copyright.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/MypageScreen.js",["142","143","144","145"],"import MypageSidebar from './MypageSidebar'\nimport Textfield from '@mui/material/TextField';\nimport { useContext } from 'react';\nimport AuthContext from '../auth';\nimport Card from './Card'\nimport List from '@mui/material/List';\nimport { GlobalStoreContext } from '../store';\nimport Button from '@mui/material/Button';\nexport default function MyPage () {\n    const { auth } = useContext(AuthContext);\n    const {store} = useContext(GlobalStoreContext);\n    const user = auth.searchUser(auth.user)\n    let list=\"\";\n    let selectbar=\"\";\n    if (store.mode==\"works\"){\n        selectbar=\n        <div>\n            <Button id=\"work-published\" sx={{bgcolor:'#c4c4c4',color:'black'}}>Published</Button>\n            <Button id=\"work-following\" sx={{bgcolor:'#c4c4c4',color:'black'}}>Following</Button>\n        </div>\n    }\n    /*\n    if (store.mode==\"friends\"){\n        list=\n            <List sx={{ width: '80%', left: '20%'}}>\n                {\n                user.friends.map((friendId)=> (\n                        <Card></Card>\n                    ))\n                }\n            </List>\n    }\n    else if(store.mode==\"followings\"){\n        list=\n            <List sx={{ width: '80%', left: '20%'}}>\n                {\n                user.following.map((authorId)=> (\n                        <Card></Card>\n                    ))\n                }\n            </List>\n    }\n    else if (store.mode==\"works\"){\n        list=\n            <List sx={{ width: '80%', left: '20%'}}>\n                {\n                user.works.map((workId)=> (\n                        <Card></Card>\n                    ))\n                }\n            </List>\n    }\n    else if (store.mode==\"likes\"){\n        list=\n            <List sx={{ width: '80%', left: '20%'}}>\n                {\n                user.like.map((workId)=> (\n                        <Card></Card>\n                    ))\n                }\n            </List>\n    }\n    */\n    return(\n        <div>\n            <MypageSidebar></MypageSidebar>\n            <div id=\"content\">\n                <div id=\"mypage-search\">\n                    <Textfield fullWidth></Textfield>\n                </div>\n                <div id=\"mypage-list\">\n                    {selectbar}\n                    {list}\n                </div>\n            </div>\n        </div>\n    );\n}\n","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/Card.js",["146","147","148","149","150"],"import { useContext } from 'react';\nimport { GlobalStoreContext } from '../store';\nimport AuthContext from '../auth';\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport MessageIcon from '@mui/icons-material/MessageOutlined';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport WorkCard from './WorkCard'\n\nexport default function Card(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext)\n    function handleMessage(){\n\n    }\n    function handleDelete(){\n        \n    }\n    let cardElement =\"\"\n    if(store.mode==\"friends\"){\n        const user = auth.searchUser(props)\n        cardElement =\n            <ListItem>\n                <Box sx={{ p: 1, flexGrow: 1 }}>{user.firstName+\" \"+user.lastName}</Box>\n                <Box sx={{ p: 1 }}>\n                    <IconButton onClick={handleMessage} aria-label='edit'>\n                        <MessageIcon style={{fontSize:'48pt'}} />\n                    </IconButton>\n                </Box>\n                <Box sx={{ p: 1 }}>\n                    <IconButton onClick={(event) => {\n                        handleDelete(event, user._id)\n                    }} aria-label='delete'>\n                        <DeleteIcon style={{fontSize:'48pt'}} />\n                    </IconButton>\n                </Box>\n            </ListItem>\n        }\n    else if (store.mode==\"followings\"){\n        const user = auth.searchUser(props)\n        cardElement =\n            <ListItem>\n                    <Box sx={{ p: 1, flexGrow: 1 }}>{user.firstName+\" \"+user.lastName}</Box>\n                    <Box sx={{ p: 1 }}>\n                        <IconButton onClick={(event) => {\n                            handleDelete(event, user._id)\n                        }} aria-label='delete'>\n                            <DeleteIcon style={{fontSize:'48pt'}} />\n                        </IconButton>\n                    </Box>\n            </ListItem>\n    }\n    else if (store.mode==\"works\"){\n        cardElement=\n            <ListItem>\n                <WorkCard></WorkCard>\n            </ListItem>\n    }\n    else if (store.mode==\"library\"){\n        <ListItem>\n                <WorkCard></WorkCard>\n            </ListItem>\n    }\n    else if (store.mode==\"likes\"){\n        <ListItem>\n                <WorkCard></WorkCard>\n            </ListItem>\n    }\n    else{\n        cardElement=\"\";\n    }\n        \n\n    return (\n        cardElement\n    );\n}\n","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/MypageProfile.js",[],"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/MypageSidebar.js",["151","152","153","154","155"],"import React from \"react\";\nimport Box from '@mui/material/Box';\nimport { useContext } from 'react';\nimport { GlobalStoreContext } from '../store';\n\nexport default function Sidebar () {\n    const {store}=useContext(GlobalStoreContext);\n    function handleClick(event,input){\n        event.stopPropagation();\n        store.setMode(input);\n        console.log(store.mode);\n    }\n    let friend =\"unselected-menu\";\n    let follow =\"unselected-menu\";\n    let work =\"unselected-menu\";\n    let library =\"unselected-menu\";\n    let like =\"unselected-menu\";\n    if(store.mode==\"friends\"){\n        friend=\"selected-menu\"\n    }\n    if(store.mode==\"followings\"){\n        follow=\"selected-menu\"\n    }\n    if(store.mode==\"works\"){\n        work=\"selected-menu\"\n    }\n    if(store.mode==\"library\"){\n        library=\"selected-menu\"\n    }\n    if(store.mode==\"likes\"){\n        like=\"selected-menu\"\n    }\n\n        return (\n            \n            <div id=\"sidebar\">\n                <div id=\"sidebar-menu\">\n                <Box class={friend} onClick={(event) => {handleClick(event,\"friends\")}}>Friends</Box>\n                <Box class={follow} onClick={(event) => {handleClick(event,\"followings\")}}>Followings</Box>\n                <Box class={work} onClick={(event) => {handleClick(event,\"works\")}}>Works</Box>\n                <Box class={library} onClick={(event) => {handleClick(event,\"library\")}}>Library</Box>\n                <Box class={like} onClick={(event) => {handleClick(event,\"likes\")}}>Your Likes</Box>\n                </div>\n            </div>\n        );\n    \n}","/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/WorkCard.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":8,"column":5,"nodeType":"162","messageId":"163","endLine":8,"endColumn":17},{"ruleId":"160","severity":1,"message":"164","line":10,"column":5,"nodeType":"162","messageId":"163","endLine":10,"endColumn":14},{"ruleId":"160","severity":1,"message":"165","line":13,"column":5,"nodeType":"162","messageId":"163","endLine":13,"endColumn":9},{"ruleId":"160","severity":1,"message":"166","line":14,"column":5,"nodeType":"162","messageId":"163","endLine":14,"endColumn":12},{"ruleId":"167","severity":1,"message":"168","line":27,"column":8,"nodeType":"169","endLine":27,"endColumn":10,"suggestions":"170"},{"ruleId":"160","severity":1,"message":"171","line":43,"column":11,"nodeType":"162","messageId":"163","endLine":43,"endColumn":18},{"ruleId":"160","severity":1,"message":"172","line":44,"column":14,"nodeType":"162","messageId":"163","endLine":44,"endColumn":30},{"ruleId":"160","severity":1,"message":"173","line":63,"column":14,"nodeType":"162","messageId":"163","endLine":63,"endColumn":28},{"ruleId":"160","severity":1,"message":"174","line":70,"column":14,"nodeType":"162","messageId":"163","endLine":70,"endColumn":30},{"ruleId":"160","severity":1,"message":"175","line":76,"column":17,"nodeType":"162","messageId":"163","endLine":76,"endColumn":21},{"ruleId":"160","severity":1,"message":"176","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":12},{"ruleId":"160","severity":1,"message":"177","line":20,"column":8,"nodeType":"162","messageId":"163","endLine":20,"endColumn":12},{"ruleId":"167","severity":1,"message":"178","line":33,"column":8,"nodeType":"169","endLine":33,"endColumn":10,"suggestions":"179"},{"ruleId":"160","severity":1,"message":"180","line":1,"column":29,"nodeType":"162","messageId":"163","endLine":1,"endColumn":37},{"ruleId":"160","severity":1,"message":"181","line":3,"column":8,"nodeType":"162","messageId":"163","endLine":3,"endColumn":17},{"ruleId":"160","severity":1,"message":"182","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":18},{"ruleId":"160","severity":1,"message":"183","line":7,"column":8,"nodeType":"162","messageId":"163","endLine":7,"endColumn":16},{"ruleId":"160","severity":1,"message":"184","line":15,"column":13,"nodeType":"162","messageId":"163","endLine":15,"endColumn":18},{"ruleId":"160","severity":1,"message":"180","line":1,"column":22,"nodeType":"162","messageId":"163","endLine":1,"endColumn":30},{"ruleId":"185","severity":1,"message":"186","line":25,"column":131,"nodeType":"187","messageId":"188","endLine":25,"endColumn":145},{"ruleId":"160","severity":1,"message":"189","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":16},{"ruleId":"160","severity":1,"message":"176","line":3,"column":8,"nodeType":"162","messageId":"163","endLine":3,"endColumn":12},{"ruleId":"160","severity":1,"message":"190","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":20},{"ruleId":"160","severity":1,"message":"191","line":21,"column":11,"nodeType":"162","messageId":"163","endLine":21,"endColumn":15},{"ruleId":"160","severity":1,"message":"192","line":29,"column":17,"nodeType":"162","messageId":"163","endLine":29,"endColumn":24},{"ruleId":"160","severity":1,"message":"193","line":30,"column":17,"nodeType":"162","messageId":"163","endLine":30,"endColumn":23},{"ruleId":"160","severity":1,"message":"165","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":12},{"ruleId":"160","severity":1,"message":"176","line":6,"column":8,"nodeType":"162","messageId":"163","endLine":6,"endColumn":12},{"ruleId":"160","severity":1,"message":"194","line":12,"column":11,"nodeType":"162","messageId":"163","endLine":12,"endColumn":15},{"ruleId":"195","severity":1,"message":"196","line":15,"column":19,"nodeType":"197","messageId":"188","endLine":15,"endColumn":21},{"ruleId":"195","severity":1,"message":"196","line":21,"column":18,"nodeType":"197","messageId":"188","endLine":21,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":40,"column":24,"nodeType":"197","messageId":"188","endLine":40,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":54,"column":24,"nodeType":"197","messageId":"188","endLine":54,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":60,"column":24,"nodeType":"197","messageId":"188","endLine":60,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":65,"column":24,"nodeType":"197","messageId":"188","endLine":65,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":18,"column":18,"nodeType":"197","messageId":"188","endLine":18,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":21,"column":18,"nodeType":"197","messageId":"188","endLine":21,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":24,"column":18,"nodeType":"197","messageId":"188","endLine":24,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":27,"column":18,"nodeType":"197","messageId":"188","endLine":27,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":30,"column":18,"nodeType":"197","messageId":"188","endLine":30,"endColumn":20},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'SplashScreen' is defined but never used.","Identifier","unusedVar","'Statusbar' is defined but never used.","'Card' is defined but never used.","'Profile' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.","ArrayExpression",["200"],"'history' is assigned a value but never used.","'handleToggleEdit' is defined but never used.","'handleKeyPress' is defined but never used.","'handleUpdateText' is defined but never used.","'card' is assigned a value but never used.","'List' is defined but never used.","'Work' is defined but never used.","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["201"],"'useState' is defined but never used.","'TextField' is defined but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'store' is assigned a value but never used.","no-dupe-keys","Duplicate key 'justifyContent'.","ObjectExpression","unexpected","'Top5Item' is defined but never used.","'Typography' is defined but never used.","'auth' is assigned a value but never used.","'comment' is assigned a value but never used.","'author' is assigned a value but never used.","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},"Update the dependencies array to be: [auth]",{"range":"206","text":"207"},"Update the dependencies array to be: [store]",{"range":"208","text":"209"},[738,740],"[auth]",[1284,1286],"[store]"]