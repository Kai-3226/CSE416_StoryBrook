{"ast":null,"code":"var _jsxFileName = \"/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  EDIT_LIST: \"EDIT_LIST\"\n}; // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    editActive: false,\n    listMarkedForDeletion: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            eidtActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.EDIT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.editList = async function (id, newName, newItems) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n      top5List.items = newItems;\n\n      if (top5List.ownerEmail === auth.user.email) {\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                let listOwned = [];\n\n                for (let key in pairsArray) {\n                  let list = pairsArray[key];\n\n                  if (list.email === auth.user.email) {\n                    listOwned.push(list);\n                  }\n                }\n\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: listOwned,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    history.push(\"/home\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"\";\n    let payload = {\n      name: newListName,\n      items: [\"\", \"\", \"\", \"\", \"\"],\n      ownerEmail: auth.user.email,\n      published: {\n        published: false,\n        time: Date()\n      },\n      view: 0,\n      likes: [],\n      dislikes: [],\n      comment: [],\n      author: auth.user.lastName + \" \" + auth.user.firstName\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      let newList = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      console.log(response.data);\n      let listOwned = [];\n\n      for (let key in pairsArray) {\n        let list = pairsArray[key];\n        console.log(list);\n        listOwned.push(list);\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: listOwned\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    if (listToDelete.ownerEmail === auth.user.email) {\n      let response = await api.deleteTop5ListById(listToDelete._id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        history.push(\"/home\");\n      }\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n      }\n    }\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_LIST,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"0CSdkEsR7kK1dBCGvQtZMlZzchM=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","EDIT_LIST","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","editActive","listMarkedForDeletion","history","auth","storeReducer","action","type","payload","eidtActive","editList","id","newName","newItems","response","getTop5ListById","data","success","top5List","name","items","ownerEmail","user","email","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","listOwned","key","list","push","CHANGE_LIST_NAME","closeCurrentList","createNewList","newListName","published","time","Date","view","likes","dislikes","comment","author","lastName","firstName","createTop5List","newList","console","log","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","updateItem","index","newItem","updateCurrentList","setIsEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    EDIT_LIST: \"EDIT_LIST\",\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        editActive: false,\n        listMarkedForDeletion: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    eidtActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.EDIT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.editList = async function (id, newName, newItems) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            top5List.items = newItems;\n            if(top5List.ownerEmail===auth.user.email){\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                let listOwned=[];\n                                for(let key in pairsArray){\n                                    let list = pairsArray[key];\n                                    if(list.email===auth.user.email){\n                                        listOwned.push(list);\n                                    }\n                                }\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: listOwned,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        history.push(\"/home\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"\"\n        let payload = {\n            name: newListName,\n            items: [\"\",\"\",\"\",\"\",\"\"],\n            ownerEmail: auth.user.email,\n            published:{published:false,time:Date()},\n            view:0,\n            likes:[],\n            dislikes:[],\n            comment:[],\n            author: auth.user.lastName+\" \"+auth.user.firstName\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        }\n        \n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            console.log(response.data)\n            let listOwned=[];\n            for(let key in pairsArray){\n                let list = pairsArray[key];\n                console.log(list);\n                listOwned.push(list);\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: listOwned\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if(listToDelete.ownerEmail===auth.user.email){\n            let response = await api.deleteTop5ListById(listToDelete._id);\n            if (response.data.success) {\n                store.loadIdNamePairs();\n                history.push(\"/home\");\n            }\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n            }\n        }\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_LIST,\n            payload: null\n        });\n    }\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}