{"ast":null,"code":"var _jsxFileName = \"/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  EDIT_LIST: \"EDIT_LIST\",\n  UPDATE_LIST: \"UPDATE_LIST\",\n  SEARCH: \"SEARCH\",\n  MODE: \"MODE\"\n}; // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    editActive: false,\n    listMarkedForDeletion: null,\n    mode: \"home\",\n    text: \"\"\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            eidtActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          console.log(store);\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: payload,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.list,\n            editActive: payload.edit,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.EDIT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n\n      case GlobalStoreActionType.SEARCH:\n        {\n          console.log(\"search\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: payload\n          });\n        }\n\n      case GlobalStoreActionType.MODE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: payload,\n            text: store.text\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.editList = async function (id, newName, newItems) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n      top5List.items = newItems;\n      store.updateList(top5List);\n    }\n\n    store.loadIdNamePairs();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    let list = store.currentList;\n    list.view++;\n    store.updateList2(list);\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    history.push(\"/home\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"\";\n    let payload = {\n      name: newListName,\n      items: [\"\", \"\", \"\", \"\", \"\"],\n      ownerEmail: auth.user.email,\n      published: {\n        published: false,\n        time: Date()\n      },\n      view: 0,\n      likes: [],\n      dislikes: [],\n      comment: [],\n      author: auth.user.lastName + \" \" + auth.user.firstName\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      let newList = response.data.top5List;\n      console.log(store.idNamePairs);\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      let listOwned = [];\n\n      for (let key in pairsArray) {\n        let list = pairsArray[key];\n\n        if (list.published.published) {\n          listOwned.push(list);\n        } else {\n          if (auth.user.email === list.email) {\n            listOwned.push(list);\n          }\n        }\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: listOwned\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id, input) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            list: top5List,\n            edit: input\n          }\n        });\n      }\n    }\n  };\n\n  store.updateList = async function (newList) {\n    if (newList.ownerEmail === auth.user.email) {\n      async function updateList(newList) {\n        let response = await api.updateTop5ListById(newList._id, newList);\n\n        if (response.data.success) {\n          async function getListPairs(newList) {\n            let response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              let listOwned = [];\n\n              for (let key in pairsArray) {\n                let list = pairsArray[key];\n                listOwned.push(list);\n              }\n\n              storeReducer({\n                type: GlobalStoreActionType.UPDATE_LIST,\n                payload: {\n                  idNamePairs: listOwned,\n                  top5List: newList\n                }\n              });\n            }\n          }\n\n          getListPairs(newList);\n        }\n      }\n\n      updateList(newList);\n    }\n\n    store.loadIdNamePairs();\n  };\n\n  store.updateList2 = async function (newList) {\n    async function updateList(newList) {\n      let response = await api.updateTop5ListById(newList._id, newList);\n\n      if (response.data.success) {\n        async function getListPairs(newList) {\n          let response = await api.getTop5ListPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let listOwned = [];\n\n            for (let key in pairsArray) {\n              let list = pairsArray[key];\n              listOwned.push(list);\n            }\n\n            storeReducer({\n              type: GlobalStoreActionType.UPDATE_LIST,\n              payload: {\n                idNamePairs: listOwned,\n                top5List: newList\n              }\n            });\n          }\n        }\n\n        getListPairs(newList);\n      }\n    }\n\n    updateList(newList);\n    store.loadIdNamePairs();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_LIST,\n      payload: null\n    });\n  };\n\n  store.publish = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let list = response.data.top5List;\n      let date = new Date();\n      list.published = {\n        published: true,\n        time: date.getMonth() + \"-\" + date.getDate() + \", \" + date.getFullYear()\n      };\n      store.updateList(list);\n    }\n  };\n\n  store.searchLists = function (payload) {\n    storeReducer({\n      type: GlobalStoreActionType.SEARCH,\n      payload: payload\n    });\n  };\n\n  store.setMode = function (input) {\n    storeReducer({\n      type: GlobalStoreActionType.MODE,\n      payload: input\n    });\n    console.log(store.mode);\n  };\n\n  store.like = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.dislikes.includes(auth.user.email)) {\n        top5List.dislikes.pop(auth.user.email);\n        top5List.likes.push(auth.user.email);\n      } else if (!top5List.likes.includes(auth.user.email)) {\n        top5List.likes.push(auth.user.email);\n      } else {\n        top5List.likes.pop(auth.user.email);\n      }\n\n      store.updateList2(top5List);\n    }\n  };\n\n  store.dislike = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.likes.includes(auth.user.email)) {\n        top5List.likes.pop(auth.user.email);\n        top5List.dislikes.push(auth.user.email);\n      } else if (!top5List.dislikes.includes(auth.user.email)) {\n        top5List.dislikes.push(auth.user.email);\n      } else {\n        top5List.dislikes.pop(auth.user.email);\n      }\n\n      store.updateList2(top5List);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"tGKNgGN95Z0KWSYE9d9exVJEDCM=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","EDIT_LIST","UPDATE_LIST","SEARCH","MODE","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","editActive","listMarkedForDeletion","mode","text","history","auth","storeReducer","action","type","payload","eidtActive","console","log","list","edit","editList","id","newName","newItems","response","getTop5ListById","data","success","top5List","name","items","updateList","loadIdNamePairs","closeCurrentList","view","updateList2","push","createNewList","newListName","ownerEmail","user","email","published","time","Date","likes","dislikes","comment","author","lastName","firstName","createTop5List","newList","getTop5ListPairs","pairsArray","listOwned","key","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","_id","deleteMarkedList","unmarkListForDeletion","setCurrentList","input","updateTop5ListById","getListPairs","updateCurrentList","setIsEditActive","publish","date","getMonth","getDate","getFullYear","searchLists","setMode","like","includes","pop","dislike","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    EDIT_LIST: \"EDIT_LIST\",\n    UPDATE_LIST: \"UPDATE_LIST\",\n    SEARCH: \"SEARCH\",\n    MODE: \"MODE\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        editActive: false,\n        listMarkedForDeletion: null,\n        mode: \"home\",\n        text: \"\"\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    eidtActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                console.log(store);\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: payload,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.list,\n                    editActive: payload.edit,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.EDIT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    editActive:false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.SEARCH: {\n                console.log(\"search\");\n                return setStore({\n                    idNamePairs:store.idNamePairs,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: store.mode,\n                    text: payload\n                });\n            }\n            case GlobalStoreActionType.MODE: {\n                return setStore({\n                    idNamePairs:store.idNamePairs,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: payload,\n                    text: store.text\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.editList = async function (id, newName, newItems) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            top5List.items = newItems;\n            store.updateList(top5List);\n        }\n        store.loadIdNamePairs();\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        let list=store.currentList;\n        list.view++;\n        store.updateList2(list);\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        history.push(\"/home\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"\"\n        let payload = {\n            name: newListName,\n            items: [\"\",\"\",\"\",\"\",\"\"],\n            ownerEmail: auth.user.email,\n            published:{published:false,time:Date()},\n            view:0,\n            likes:[],\n            dislikes:[],\n            comment:[],\n            author: auth.user.lastName+\" \"+auth.user.firstName\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            console.log(store.idNamePairs);\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        }\n        \n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let listOwned=[];\n            for(let key in pairsArray){\n                let list = pairsArray[key];\n                if(list.published.published){\n                    listOwned.push(list);\n                }\n                else{\n                    if(auth.user.email===list.email){\n                        listOwned.push(list);\n                    }\n                }\n                \n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: listOwned\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id, input) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {list: top5List,edit: input}\n                });\n            }\n        }\n    }\n    store.updateList = async function (newList) {\n        if(newList.ownerEmail===auth.user.email){\n            async function updateList(newList) {\n                let response = await api.updateTop5ListById(newList._id, newList);\n                if (response.data.success) {\n                    async function getListPairs(newList) {\n                        let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let listOwned=[];\n                            for(let key in pairsArray){\n                                let list = pairsArray[key];\n                                listOwned.push(list);\n                            }\n                            storeReducer({\n                                type: GlobalStoreActionType.UPDATE_LIST,\n                                payload: {\n                                    idNamePairs: listOwned,\n                                    top5List: newList\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(newList);\n                }\n            }\n            updateList(newList);\n        }\n        store.loadIdNamePairs();\n    }\n    store.updateList2 = async function (newList) {\n        async function updateList(newList) {\n            let response = await api.updateTop5ListById(newList._id, newList);\n            if (response.data.success) {\n                async function getListPairs(newList) {\n                    let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        let listOwned=[];\n                        for(let key in pairsArray){\n                            let list = pairsArray[key];\n                            listOwned.push(list);\n                        }\n                        storeReducer({\n                            type: GlobalStoreActionType.UPDATE_LIST,\n                            payload: {\n                                idNamePairs: listOwned,\n                                top5List: newList\n                            }\n                        });\n                    }\n                }\n                getListPairs(newList);\n            }\n        }\n        updateList(newList);\n        store.loadIdNamePairs();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_LIST,\n            payload: null\n        });\n    }\n    store.publish = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let list=response.data.top5List;\n            let date = new Date();\n            list.published={published:true,time:date.getMonth()+\"-\"+date.getDate()+\", \"+date.getFullYear()}\n            store.updateList(list);\n        }\n    }\n    store.searchLists = function (payload) {\n        storeReducer({\n            type: GlobalStoreActionType.SEARCH,\n            payload:payload\n        });\n    }\n    store.setMode= function (input){\n        storeReducer({\n            type: GlobalStoreActionType.MODE,\n            payload:input\n        });\n        console.log(store.mode);\n    }\n    store.like = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if(top5List.dislikes.includes(auth.user.email)){\n                top5List.dislikes.pop(auth.user.email);\n                top5List.likes.push(auth.user.email);\n            }\n            else if(!top5List.likes.includes(auth.user.email)){\n                top5List.likes.push(auth.user.email);\n            }\n            else{\n                top5List.likes.pop(auth.user.email);\n            }\n            store.updateList2(top5List);\n        }\n    }\n    store.dislike = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if(top5List.likes.includes(auth.user.email)){\n                top5List.likes.pop(auth.user.email);\n                top5List.dislikes.push(auth.user.email);\n            }\n            else if(!top5List.dislikes.includes(auth.user.email)){\n                top5List.dislikes.push(auth.user.email);\n            }\n            else{\n                top5List.dislikes.pop(auth.user.email);\n            }\n            store.updateList2(top5List);\n        }\n    }\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}