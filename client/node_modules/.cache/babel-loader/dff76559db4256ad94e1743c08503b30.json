{"ast":null,"code":"var _jsxFileName = \"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/DeleteModal.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { GlobalStoreContext } from '../store';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\n/*\n    This modal is shown when the user asks to delete a list. Note \n    that before this is shown a list has to be marked for deletion,\n    which means its id has to be known so that we can retrieve its\n    information and display its name in this modal. If the user presses\n    confirm, it will be deleted.\n    \n    @author McKilla Gorilla\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n};\n\nfunction DeleteModal() {\n  _s();\n\n  let open = false;\n  const {\n    store\n  } = useContext(GlobalStoreContext);\n  let name = \"\";\n\n  if (store.listMarkedForDeletion) {\n    name = store.listMarkedForDeletion.name;\n    open = true;\n  }\n\n  function handleDeleteList(event) {\n    store.deleteMarkedList();\n    handleClose();\n  }\n\n  function handleClose(event) {\n    store.unmarkListForDeletion();\n    open = false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      \"aria-labelledby\": \"modal-modal-title\",\n      \"aria-describedby\": \"modal-modal-description\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"List Deletion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: [\"Delete the \", name, \" Top5 List?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"dialog-yes-button\",\n          onClick: handleDeleteList,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"dialog-no-button\",\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeleteModal, \"73C7T2gc7osE0gOE4ApLm9/B7dk=\");\n\n_c = DeleteModal;\nexport default DeleteModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteModal\");","map":{"version":3,"sources":["/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/components/DeleteModal.js"],"names":["useContext","GlobalStoreContext","React","Box","Button","Typography","Modal","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","DeleteModal","open","store","name","listMarkedForDeletion","handleDeleteList","event","deleteMarkedList","handleClose","unmarkListForDeletion","mt"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,kBAAT,QAAmC,UAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,UADA;AAEVC,EAAAA,GAAG,EAAE,KAFK;AAGVC,EAAAA,IAAI,EAAE,KAHI;AAIVC,EAAAA,SAAS,EAAE,uBAJD;AAKVC,EAAAA,KAAK,EAAE,GALG;AAMVC,EAAAA,OAAO,EAAE,kBANC;AAOVC,EAAAA,MAAM,EAAE,gBAPE;AAQVC,EAAAA,SAAS,EAAE,EARD;AASVC,EAAAA,CAAC,EAAE;AATO,CAAd;;AAYA,SAASC,WAAT,GAAuB;AAAA;;AAEnB,MAAIC,IAAI,GAAC,KAAT;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYnB,UAAU,CAACC,kBAAD,CAA5B;AACA,MAAImB,IAAI,GAAG,EAAX;;AACA,MAAID,KAAK,CAACE,qBAAV,EAAiC;AAC7BD,IAAAA,IAAI,GAAGD,KAAK,CAACE,qBAAN,CAA4BD,IAAnC;AACAF,IAAAA,IAAI,GAAC,IAAL;AACH;;AACD,WAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7BJ,IAAAA,KAAK,CAACK,gBAAN;AACAC,IAAAA,WAAW;AACd;;AACD,WAASA,WAAT,CAAqBF,KAArB,EAA2B;AACvBJ,IAAAA,KAAK,CAACO,qBAAN;AACAR,IAAAA,IAAI,GAAC,KAAL;AACH;;AAEH,sBACE;AAAA,2BACE,QAAC,KAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAEE,MAAA,OAAO,EAAEO,WAFX;AAGE,yBAAgB,mBAHlB;AAIE,0BAAiB,yBAJnB;AAAA,6BAME,QAAC,GAAD;AAAK,QAAA,EAAE,EAAElB,KAAT;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,EAAE,EAAC,mBAAf;AAAmC,UAAA,OAAO,EAAC,IAA3C;AAAgD,UAAA,SAAS,EAAC,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,UAAD;AAAY,UAAA,EAAE,EAAC,yBAAf;AAAyC,UAAA,EAAE,EAAE;AAAEoB,YAAAA,EAAE,EAAE;AAAN,WAA7C;AAAA,oCACcP,IADd;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,MAAD;AACE,UAAA,EAAE,EAAC,mBADL;AAEE,UAAA,OAAO,EAAEE,gBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE,QAAC,MAAD;AACE,UAAA,EAAE,EAAC,kBADL;AAEE,UAAA,OAAO,EAAEG,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GA3CQR,W;;KAAAA,W;AA6CT,eAAeA,WAAf","sourcesContent":["import { useContext } from 'react';\nimport { GlobalStoreContext } from '../store';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\n/*\n    This modal is shown when the user asks to delete a list. Note \n    that before this is shown a list has to be marked for deletion,\n    which means its id has to be known so that we can retrieve its\n    information and display its name in this modal. If the user presses\n    confirm, it will be deleted.\n    \n    @author McKilla Gorilla\n*/\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n  };\n\nfunction DeleteModal() {\n\n    let open=false;\n    const { store } = useContext(GlobalStoreContext);\n    let name = \"\";\n    if (store.listMarkedForDeletion) {\n        name = store.listMarkedForDeletion.name;\n        open=true;\n    }\n    function handleDeleteList(event) {\n        store.deleteMarkedList();\n        handleClose();\n    }\n    function handleClose(event){\n        store.unmarkListForDeletion();\n        open=false;\n    }\n    \n  return (\n    <div>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            List Deletion\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Delete the {name} Top5 List?\n          </Typography>\n          <Button\n            id=\"dialog-yes-button\"\n            onClick={handleDeleteList}>Confirm</Button>\n          <Button\n            id=\"dialog-no-button\"\n            onClick={handleClose}>Cancel</Button>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n\nexport default DeleteModal;"]},"metadata":{},"sourceType":"module"}