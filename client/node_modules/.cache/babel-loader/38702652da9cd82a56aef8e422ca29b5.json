{"ast":null,"code":"var _jsxFileName = \"/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/auth/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconsole.log(\"create AuthContext: \" + AuthContext); // THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\n\nexport const AuthActionType = {\n  GET_LOGGED_IN: \"GET_LOGGED_IN\",\n  REGISTER_USER: \"REGISTER_USER\",\n  LOGOUT_USER: \"LOGOUT_USER\",\n  LOGIN_USER: \"LOGIN_USER\",\n  ERROR: \"ERROR\",\n  CHANGE_PASSWORD: \"CHANGE_PASSWORD\"\n};\n\nfunction AuthContextProvider(props) {\n  _s();\n\n  const [auth, setAuth] = useState({\n    user: null,\n    loggedIn: false,\n    error: false\n  });\n  const history = useHistory();\n  useEffect(() => {\n    auth.getLoggedIn();\n  }, []);\n\n  const authReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case AuthActionType.GET_LOGGED_IN:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: payload.loggedIn,\n            error: false\n          });\n        }\n\n      case AuthActionType.REGISTER_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true,\n            error: false\n          });\n        }\n\n      case AuthActionType.LOGOUT_USER:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false,\n            error: false\n          });\n        }\n\n      case AuthActionType.LOGIN_USER:\n        {\n          return setAuth({\n            user: payload,\n            loggedIn: true,\n            error: false\n          });\n        }\n\n      case AuthActionType.ERROR:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false,\n            error: payload\n          });\n        }\n\n      default:\n        return setAuth({\n          user: null,\n          loggedIn: false,\n          error: false\n        });\n    }\n  };\n\n  auth.default = function () {\n    authReducer({\n      type: AuthActionType.default,\n      payload: null\n    });\n  };\n\n  auth.getLoggedIn = async function () {\n    const response = await api.getLoggedIn();\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.SET_LOGGED_IN,\n        payload: {\n          loggedIn: response.data.loggedIn,\n          user: response.data.user\n        }\n      });\n    }\n  };\n\n  auth.registerUser = async function (userData, store) {\n    try {\n      const response = await api.registerUser(userData);\n\n      if (response.status === 200) {\n        authReducer({\n          type: AuthActionType.REGISTER_USER,\n          payload: {\n            user: response.data.user\n          }\n        });\n        history.push(\"/home\");\n        store.loadIdNamePairs();\n      }\n    } catch (err) {\n      authReducer({\n        type: AuthActionType.ERROR,\n        payload: {\n          status: err.response.status,\n          message: err.response.data.errorMessage\n        }\n      });\n    }\n  };\n\n  auth.logoutUser = async function () {\n    const response = await api.logoutUser();\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.LOGOUT_USER,\n        paylaod: null\n      });\n      history.push(\"/\");\n    }\n  };\n\n  auth.loginUser = async function (user) {\n    try {\n      const response = await api.loginUser(user);\n\n      if (response.status === 200) {\n        authReducer({\n          type: AuthActionType.LOGIN_USER,\n          payload: response.data.user\n        });\n        history.push(\"/home\");\n      }\n    } catch (err) {\n      authReducer({\n        type: AuthActionType.ERROR,\n        payload: {\n          status: err.response.status,\n          message: err.response.data.errorMessage\n        }\n      });\n    }\n  };\n\n  auth.changePassword = async function (input) {\n    const response = await api.changePassword(input);\n\n    if (response.data.success) {\n      storeReducer({\n        type: AuthActionType.CHANGE_PASSWORD,\n        payload: input\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"3dKOy2rEly1Wm53qlBbI5UJMINQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\nexport { AuthContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/ijun-yeong/Desktop/CSE416/StoryBrook/client/src/auth/index.js"],"names":["React","createContext","useEffect","useState","useHistory","api","AuthContext","console","log","AuthActionType","GET_LOGGED_IN","REGISTER_USER","LOGOUT_USER","LOGIN_USER","ERROR","CHANGE_PASSWORD","AuthContextProvider","props","auth","setAuth","user","loggedIn","error","history","getLoggedIn","authReducer","action","type","payload","default","response","status","SET_LOGGED_IN","data","registerUser","userData","store","push","loadIdNamePairs","err","message","errorMessage","logoutUser","paylaod","loginUser","changePassword","input","success","storeReducer","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    LOGIN_USER: \"LOGIN_USER\",\n    ERROR: \"ERROR\",\n    CHANGE_PASSWORD: \"CHANGE_PASSWORD\",\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false,\n        error: false\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn,\n                    error: false\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true,\n                    error: false\n                })\n            }\n            case AuthActionType.LOGOUT_USER: {\n                return setAuth({\n                    user:null,\n                    loggedIn: false,\n                    error: false\n                })\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user:payload,\n                    loggedIn:true,\n                    error:false\n                })\n            }\n            case AuthActionType.ERROR: {\n                return setAuth({\n                    user:null,\n                    loggedIn:false,\n                    error:payload\n                })\n            }\n            default:\n                return setAuth({\n                    user:null,\n                    loggedIn:false,\n                    error:false\n                })\n        }\n    }\n    auth.default= function () {\n        authReducer({\n            type: AuthActionType.default,\n            payload: null\n        });\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.SET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user,\n                }\n            });\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        try{\n            const response = await api.registerUser(userData);      \n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/home\");\n                store.loadIdNamePairs();\n            }\n        }\n        catch(err){\n            authReducer({\n                type: AuthActionType.ERROR,\n                payload:{\n                    status:err.response.status,\n                    message:err.response.data.errorMessage\n                }\n            })\n        }\n    }\n    auth.logoutUser = async function(){\n        const response = await api.logoutUser();\n        if(response.status === 200){\n            authReducer({\n                type: AuthActionType.LOGOUT_USER,\n                paylaod:null\n            })\n            history.push(\"/\");\n        }\n    }\n    auth.loginUser = async function(user){\n        try{\n            const response = await api.loginUser(user);\n            if(response.status===200){\n                authReducer({\n                    type: AuthActionType.LOGIN_USER,\n                    payload:response.data.user\n                })\n                history.push(\"/home\");\n            }\n        }\n        catch(err){\n            authReducer({\n                type: AuthActionType.ERROR,\n                payload:{\n                    status:err.response.status,\n                    message:err.response.data.errorMessage\n                }\n            })\n        }\n        \n    }\n    auth.changePassword = async function (input){\n        const response = await api.changePassword(input);\n        if(response.data.success){\n            storeReducer({\n                type:AuthActionType.CHANGE_PASSWORD,\n                payload: input\n            })\n        }\n    }\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };"]},"metadata":{},"sourceType":"module"}