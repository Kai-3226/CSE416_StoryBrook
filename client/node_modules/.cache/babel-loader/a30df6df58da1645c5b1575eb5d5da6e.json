{"ast":null,"code":"var _jsxFileName = \"/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  EDIT_LIST: \"EDIT_LIST\",\n  UPDATE_LIST: \"UPDATE_LIST\",\n  SEARCH: \"SEARCH\",\n  MODE: \"MODE\",\n  SORT: \"SORT\"\n}; // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    editActive: false,\n    listMarkedForDeletion: null,\n    mode: \"home\",\n    text: \"\"\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            eidtActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          console.log(\"loading\");\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: payload,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.list,\n            editActive: payload.edit,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.EDIT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n\n      case GlobalStoreActionType.SEARCH:\n        {\n          console.log(\"search\");\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: \"\"\n          });\n        }\n\n      case GlobalStoreActionType.MODE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: payload,\n            text: store.text\n          });\n        }\n\n      case GlobalStoreActionType.SORT:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null,\n            mode: store.mode,\n            text: store.text\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.editList = async function (id, newName, newItems) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n      top5List.items = newItems;\n      store.updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    let list = store.currentList;\n    list.view++;\n    store.updateList2(list);\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    history.push(\"/home\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"\";\n    let payload = {\n      name: newListName,\n      items: [\"\", \"\", \"\", \"\", \"\"],\n      ownerEmail: auth.user.email,\n      published: {\n        published: false,\n        time: Date()\n      },\n      view: 0,\n      likes: [],\n      dislikes: [],\n      comment: [],\n      author: auth.user.lastName + \" \" + auth.user.firstName\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      let newList = response.data.top5List;\n      console.log(store.idNamePairs);\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      let listOwned = [];\n\n      for (let key in pairsArray) {\n        let list = pairsArray[key];\n\n        if (auth.loggedIn) {\n          if (auth.user.email === list.email) {\n            console.log(auth.user.email, list.email, list.published.published);\n            listOwned.push(list);\n          } else if (list.published.published) {\n            console.log(auth.user.email, list.email, list.published.published);\n            listOwned.push(list);\n          }\n        } else {\n          if (list.published.published) {\n            listOwned.push(list);\n          }\n        }\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: listOwned\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id, input) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: {\n            list: top5List,\n            edit: input\n          }\n        });\n      }\n    }\n  };\n\n  store.updateList = async function (newList) {\n    if (newList.ownerEmail === auth.user.email) {\n      async function updateList(newList) {\n        let response = await api.updateTop5ListById(newList._id, newList);\n\n        if (response.data.success) {\n          async function getListPairs(newList) {\n            let response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              let listOwned = [];\n\n              for (let key in pairsArray) {\n                let list = pairsArray[key];\n                listOwned.push(list);\n              }\n\n              storeReducer({\n                type: GlobalStoreActionType.UPDATE_LIST,\n                payload: {\n                  idNamePairs: listOwned,\n                  top5List: newList\n                }\n              });\n            }\n          }\n\n          getListPairs(newList);\n        }\n      }\n\n      updateList(newList);\n    }\n\n    store.loadIdNamePairs();\n  };\n\n  store.updateList2 = async function (newList) {\n    async function updateList(newList) {\n      let response = await api.updateTop5ListById(newList._id, newList);\n\n      if (response.data.success) {\n        async function getListPairs(newList) {\n          let response = await api.getTop5ListPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let listOwned = [];\n\n            for (let key in pairsArray) {\n              let list = pairsArray[key];\n              listOwned.push(list);\n            }\n\n            storeReducer({\n              type: GlobalStoreActionType.UPDATE_LIST,\n              payload: {\n                idNamePairs: listOwned,\n                top5List: newList\n              }\n            });\n          }\n        }\n\n        getListPairs(newList);\n      }\n    }\n\n    updateList(newList);\n    store.loadIdNamePairs();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_LIST,\n      payload: null\n    });\n  };\n\n  store.publish = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let list = response.data.top5List;\n      let date = new Date();\n      list.published = {\n        published: true,\n        time: date.getMonth() + \"-\" + date.getDate() + \", \" + date.getFullYear()\n      };\n      store.updateList(list);\n    }\n  };\n\n  store.searchLists = function (payload) {\n    let lists = store.idNamePairs;\n    console.log(lists);\n    let filter = [];\n\n    for (let key in lists) {\n      let list = lists[key];\n\n      if (list.published.published) {\n        if (store.mode === \"home\") {\n          if (list.name.toLowerCase().startsWith(payload.toLowerCase())) {\n            filter.push(list);\n          }\n        } else if (store.mode === \"all\") {\n          if (list.name.toLowerCase() === payload.toLowerCase()) {\n            filter.push(list);\n          }\n        } else if (store.mode === \"user\") {\n          if (list.author.toLowerCase() === payload.toLowerCase()) {\n            filter.push(list);\n          }\n        } else {\n          if (list.name.toLowerCase().startsWith(payload.toLowerCase())) {\n            filter.push(list);\n          }\n        }\n      }\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.SEARCH,\n      payload: filter\n    });\n  };\n\n  store.setMode = function (input) {\n    storeReducer({\n      type: GlobalStoreActionType.MODE,\n      payload: input\n    });\n    console.log(store.mode);\n  };\n\n  store.like = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.dislikes.includes(auth.user.email)) {\n        top5List.dislikes.pop(auth.user.email);\n        top5List.likes.push(auth.user.email);\n      } else if (!top5List.likes.includes(auth.user.email)) {\n        top5List.likes.push(auth.user.email);\n      } else {\n        top5List.likes.pop(auth.user.email);\n      }\n\n      store.updateList2(top5List);\n    }\n  };\n\n  store.dislike = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.likes.includes(auth.user.email)) {\n        top5List.likes.pop(auth.user.email);\n        top5List.dislikes.push(auth.user.email);\n      } else if (!top5List.dislikes.includes(auth.user.email)) {\n        top5List.dislikes.push(auth.user.email);\n      } else {\n        top5List.dislikes.pop(auth.user.email);\n      }\n\n      store.updateList2(top5List);\n    }\n  };\n\n  function swap(arr, xp, yp) {\n    var temp = arr[xp];\n    arr[xp] = arr[yp];\n    arr[yp] = temp;\n  } // An optimized version of Bubble Sort\n\n\n  store.sortBy = function (criteria) {\n    let i, j;\n    let lists = store.idNamePairs;\n\n    for (i = 0; i < lists.length - 1; i++) {\n      for (j = 0; j < lists.length - i - 1; j++) {\n        if (criteria === 1) {\n          if (lists[j].published.time > lists[j + 1].published.time) {\n            swap(lists, j, j + 1);\n          }\n        } else if (criteria === 2) {\n          if (lists[j].published.time < lists[j + 1].published.time) {\n            swap(lists, j, j + 1);\n          }\n        } else if (criteria === 3) {\n          if (lists[j].view < lists[j + 1].view) {\n            swap(lists, j, j + 1);\n          }\n        } else if (criteria === 4) {\n          if (lists[j].likes.length < lists[j + 1].likes.length) {\n            swap(lists, j, j + 1);\n          }\n        } else {\n          if (lists[j].dislikes.length < lists[j + 1].dislikes.length) {\n            swap(lists, j, j + 1);\n          }\n        }\n      }\n    }\n\n    storeReducer({\n      type: GlobalStoreActionType.SORT,\n      payload: lists\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 529,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"tGKNgGN95Z0KWSYE9d9exVJEDCM=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","EDIT_LIST","UPDATE_LIST","SEARCH","MODE","SORT","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","editActive","listMarkedForDeletion","mode","text","history","auth","storeReducer","action","type","payload","eidtActive","console","log","list","edit","editList","id","newName","newItems","response","getTop5ListById","data","success","top5List","name","items","updateList","closeCurrentList","view","updateList2","push","createNewList","newListName","ownerEmail","user","email","published","time","Date","likes","dislikes","comment","author","lastName","firstName","createTop5List","newList","loadIdNamePairs","getTop5ListPairs","pairsArray","listOwned","key","loggedIn","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","_id","deleteMarkedList","unmarkListForDeletion","setCurrentList","input","updateTop5ListById","getListPairs","updateCurrentList","setIsEditActive","publish","date","getMonth","getDate","getFullYear","searchLists","lists","filter","toLowerCase","startsWith","setMode","like","includes","pop","dislike","swap","arr","xp","yp","temp","sortBy","criteria","i","j","length","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    EDIT_LIST: \"EDIT_LIST\",\n    UPDATE_LIST: \"UPDATE_LIST\",\n    SEARCH: \"SEARCH\",\n    MODE: \"MODE\",\n    SORT: \"SORT\",\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        editActive: false,\n        listMarkedForDeletion: null,\n        mode: \"home\",\n        text: \"\"\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    eidtActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                console.log(\"loading\");\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: payload,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.list,\n                    editActive: payload.edit,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.EDIT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    editActive:false,\n                    listMarkedForDeletion: null,\n                    mode: store.mode,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.SEARCH: {\n                console.log(\"search\");\n                return setStore({\n                    idNamePairs:payload,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: store.mode,\n                    text: \"\"\n                });\n            }\n            case GlobalStoreActionType.MODE: {\n                return setStore({\n                    idNamePairs:store.idNamePairs,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: payload,\n                    text: store.text\n                });\n            }\n            case GlobalStoreActionType.SORT: {\n                return setStore({\n                    idNamePairs:payload,\n                    currentList:null,\n                    editActive:false,\n                    listMarkedForDeletion:null,\n                    mode: store.mode,\n                    text: store.text\n                })\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.editList = async function (id, newName, newItems) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            top5List.items = newItems;\n            store.updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        let list=store.currentList;\n        list.view++;\n        store.updateList2(list);\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        history.push(\"/home\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"\"\n        let payload = {\n            name: newListName,\n            items: [\"\",\"\",\"\",\"\",\"\"],\n            ownerEmail: auth.user.email,\n            published:{published:false,time:Date()},\n            view:0,\n            likes:[],\n            dislikes:[],\n            comment:[],\n            author: auth.user.lastName+\" \"+auth.user.firstName\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            console.log(store.idNamePairs);\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        }\n        \n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            let listOwned=[];\n            for(let key in pairsArray){\n                let list = pairsArray[key];\n                if(auth.loggedIn){\n                    if(auth.user.email===list.email){\n                        console.log(auth.user.email,list.email,list.published.published)\n                        listOwned.push(list);\n                    }\n                    else if(list.published.published){\n                        console.log(auth.user.email,list.email,list.published.published)\n                        listOwned.push(list);\n                    }\n                }\n                else{\n                    if(list.published.published){\n                        listOwned.push(list);\n                    } \n                }\n                \n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: listOwned\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id, input) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: {list: top5List,edit: input}\n                });\n            }\n        }\n    }\n    store.updateList = async function (newList) {\n        if(newList.ownerEmail===auth.user.email){\n            async function updateList(newList) {\n                let response = await api.updateTop5ListById(newList._id, newList);\n                if (response.data.success) {\n                    async function getListPairs(newList) {\n                        let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let listOwned=[];\n                            for(let key in pairsArray){\n                                let list = pairsArray[key];\n                                listOwned.push(list);\n                            }\n                            storeReducer({\n                                type: GlobalStoreActionType.UPDATE_LIST,\n                                payload: {\n                                    idNamePairs: listOwned,\n                                    top5List: newList\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(newList);\n                }\n            }\n            updateList(newList);\n        }\n        store.loadIdNamePairs();\n    }\n    store.updateList2 = async function (newList) {\n        async function updateList(newList) {\n            let response = await api.updateTop5ListById(newList._id, newList);\n            if (response.data.success) {\n                async function getListPairs(newList) {\n                    let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        let listOwned=[];\n                        for(let key in pairsArray){\n                            let list = pairsArray[key];\n                            listOwned.push(list);\n                        }\n                        storeReducer({\n                            type: GlobalStoreActionType.UPDATE_LIST,\n                            payload: {\n                                idNamePairs: listOwned,\n                                top5List: newList\n                            }\n                        });\n                    }\n                }\n                getListPairs(newList);\n            }\n        }\n        updateList(newList);\n        store.loadIdNamePairs();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_LIST,\n            payload: null\n        });\n    }\n    store.publish = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let list=response.data.top5List;\n            let date = new Date();\n            list.published={published:true,time:date.getMonth()+\"-\"+date.getDate()+\", \"+date.getFullYear()}\n            store.updateList(list);\n        }\n    }\n    store.searchLists = function (payload) {\n        let lists=store.idNamePairs;\n        console.log(lists);\n        let filter =[];\n        for(let key in lists){\n            let list=lists[key]\n            if(list.published.published){\n                if(store.mode===\"home\"){\n                    if(list.name.toLowerCase().startsWith(payload.toLowerCase())){\n                        filter.push(list);\n                    }\n                }\n                else if(store.mode===\"all\"){\n                    if(list.name.toLowerCase()===payload.toLowerCase()){\n                        filter.push(list);\n                    }\n                }\n                else if(store.mode===\"user\"){\n                    if(list.author.toLowerCase()===payload.toLowerCase()){\n                        filter.push(list);\n                    }\n                }\n                else{\n                    if(list.name.toLowerCase().startsWith(payload.toLowerCase())){\n                        filter.push(list);\n                    }\n                }\n            }\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SEARCH,\n            payload:filter\n        });\n    }\n    store.setMode= function (input){\n        storeReducer({\n            type: GlobalStoreActionType.MODE,\n            payload:input\n        });\n        console.log(store.mode);\n    }\n    store.like = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if(top5List.dislikes.includes(auth.user.email)){\n                top5List.dislikes.pop(auth.user.email);\n                top5List.likes.push(auth.user.email);\n            }\n            else if(!top5List.likes.includes(auth.user.email)){\n                top5List.likes.push(auth.user.email);\n            }\n            else{\n                top5List.likes.pop(auth.user.email);\n            }\n            store.updateList2(top5List);\n        }\n    }\n    store.dislike = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if(top5List.likes.includes(auth.user.email)){\n                top5List.likes.pop(auth.user.email);\n                top5List.dislikes.push(auth.user.email);\n            }\n            else if(!top5List.dislikes.includes(auth.user.email)){\n                top5List.dislikes.push(auth.user.email);\n            }\n            else{\n                top5List.dislikes.pop(auth.user.email);\n            }\n            store.updateList2(top5List);\n        }\n    }\n    function swap(arr, xp, yp){\n        var temp = arr[xp];\n        arr[xp] = arr[yp];\n        arr[yp] = temp;\n    }\n \n// An optimized version of Bubble Sort\n    store.sortBy = function(criteria) {\n        let i, j;\n        let lists=store.idNamePairs;\n        for (i = 0; i < lists.length-1; i++) {\n            for (j = 0; j < lists.length-i-1; j++) {\n                if(criteria===1){\n                    if (lists[j].published.time > lists[j+1].published.time){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else if(criteria===2){\n                    if (lists[j].published.time < lists[j+1].published.time){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else if(criteria===3){\n                    if (lists[j].view < lists[j+1].view){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else if(criteria===4){\n                    if (lists[j].likes.length < lists[j+1].likes.length){\n                        swap(lists,j,j+1);\n                    }\n                }\n                else {\n                    if (lists[j].dislikes.length < lists[j+1].dislikes.length){\n                        swap(lists,j,j+1);\n                    }\n                }\n            }\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SORT,\n            payload: lists\n        });\n    }\n    \n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}