{"ast":null,"code":"var _jsxFileName = \"/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  EDIT_LIST: \"EDIT_LIST\",\n  UPDATE_LIST: \"UPDATE_LIST\"\n}; // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    editActive: false,\n    listMarkedForDeletion: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            eidtActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.EDIT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            editActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.top5List,\n            currentList: store.currentList,\n            editActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.editList = async function (id, newName, newItems) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n      top5List.items = newItems;\n\n      if (top5List.ownerEmail === auth.user.email) {\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                let listOwned = [];\n\n                for (let key in pairsArray) {\n                  let list = pairsArray[key];\n\n                  if (list.email === auth.user.email) {\n                    listOwned.push(list);\n                  }\n                }\n\n                storeReducer({\n                  type: GlobalStoreActionType.EDIT_LIST,\n                  payload: {\n                    idNamePairs: listOwned,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    history.push(\"/home\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"\";\n    let payload = {\n      name: newListName,\n      items: [\"\", \"\", \"\", \"\", \"\"],\n      ownerEmail: auth.user.email,\n      published: {\n        published: false,\n        time: Date()\n      },\n      view: 0,\n      likes: [],\n      dislikes: [],\n      comment: [],\n      author: auth.user.lastName + \" \" + auth.user.firstName\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      let newList = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs;\n      console.log(response.data);\n      let listOwned = [];\n\n      for (let key in pairsArray) {\n        let list = pairsArray[key];\n        console.log(list);\n        listOwned.push(list);\n      }\n\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: listOwned\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    if (listToDelete.ownerEmail === auth.user.email) {\n      let response = await api.deleteTop5ListById(listToDelete._id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        history.push(\"/home\");\n      }\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n      }\n    }\n  };\n\n  store.updateList = async function (newList) {\n    if (newList.ownerEmail === auth.user.email) {\n      async function updateList(newList) {\n        let response = await api.updateTop5ListById(newList._id, newList);\n\n        if (response.data.success) {\n          async function getListPairs(newList) {\n            let response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              let listOwned = [];\n\n              for (let key in pairsArray) {\n                let list = pairsArray[key];\n                listOwned.push(list);\n              }\n\n              storeReducer({\n                type: GlobalStoreActionType.EDIT_LIST,\n                payload: {\n                  idNamePairs: listOwned,\n                  top5List: newList\n                }\n              });\n            }\n          }\n\n          getListPairs(newList);\n        }\n      }\n\n      updateList(newList);\n    }\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.EDIT_LIST,\n      payload: null\n    });\n  };\n\n  store.publish = function () {\n    let publish = {\n      published: true,\n      time: new Date().getMinutes()\n    };\n    let list = this.currentList;\n    list.published = publish;\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"0CSdkEsR7kK1dBCGvQtZMlZzchM=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/ijun-yeong/Desktop/CSE316/HW/Project/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","api","AuthContext","GlobalStoreContext","GlobalStoreActionType","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","EDIT_LIST","UPDATE_LIST","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","editActive","listMarkedForDeletion","history","auth","storeReducer","action","type","payload","eidtActive","top5List","editList","id","newName","newItems","response","getTop5ListById","data","success","name","items","ownerEmail","user","email","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","listOwned","key","list","push","closeCurrentList","createNewList","newListName","published","time","Date","view","likes","dislikes","comment","author","lastName","firstName","createTop5List","newList","console","log","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","updateCurrentList","setIsEditActive","publish","getMinutes","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    EDIT_LIST: \"EDIT_LIST\",\n    UPDATE_LIST: \"UPDATE_LIST\"\n}\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        editActive: false,\n        listMarkedForDeletion: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    eidtActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: payload\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    editActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.EDIT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    editActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs: payload.top5List,\n                    currentList: store.currentList,\n                    editActive:false,\n                    listMarkedForDeletion: null\n                })\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.editList = async function (id, newName, newItems) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            top5List.items = newItems;\n            if(top5List.ownerEmail===auth.user.email){\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                let listOwned=[];\n                                for(let key in pairsArray){\n                                    let list = pairsArray[key];\n                                    if(list.email===auth.user.email){\n                                        listOwned.push(list);\n                                    }\n                                }\n                                storeReducer({\n                                    type: GlobalStoreActionType.EDIT_LIST,\n                                    payload: {\n                                        idNamePairs: listOwned,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        history.push(\"/home\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"\"\n        let payload = {\n            name: newListName,\n            items: [\"\",\"\",\"\",\"\",\"\"],\n            ownerEmail: auth.user.email,\n            published:{published:false,time:Date()},\n            view:0,\n            likes:[],\n            dislikes:[],\n            comment:[],\n            author: auth.user.lastName+\" \"+auth.user.firstName\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n        }\n        \n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            console.log(response.data)\n            let listOwned=[];\n            for(let key in pairsArray){\n                let list = pairsArray[key];\n                console.log(list);\n                listOwned.push(list);\n            }\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: listOwned\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        if(listToDelete.ownerEmail===auth.user.email){\n            let response = await api.deleteTop5ListById(listToDelete._id);\n            if (response.data.success) {\n                store.loadIdNamePairs();\n                history.push(\"/home\");\n            }\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n            }\n        }\n    }\n\n    store.updateList = async function (newList) {\n        if(newList.ownerEmail===auth.user.email){\n            async function updateList(newList) {\n                let response = await api.updateTop5ListById(newList._id, newList);\n                if (response.data.success) {\n                    async function getListPairs(newList) {\n                        let response = await api.getTop5ListPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            let listOwned=[];\n                            for(let key in pairsArray){\n                                let list = pairsArray[key];\n                                listOwned.push(list);\n                            }\n                            storeReducer({\n                                type: GlobalStoreActionType.EDIT_LIST,\n                                payload: {\n                                    idNamePairs: listOwned,\n                                    top5List: newList\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(newList);\n                }\n            }\n            updateList(newList);\n        }\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.EDIT_LIST,\n            payload: null\n        });\n    }\n    store.publish = function () {\n        let publish = {published:true,time:new Date().getMinutes()}\n        let list=this.currentList;\n        list.published = publish\n\n    }\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}